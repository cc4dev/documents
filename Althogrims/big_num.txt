// khai bao
const int coso = 100000000;
const int maxD = 10005;
struct big
{
    int num;
    int d[maxD];
};

// cac bieu thuc logic
bool operator > (big x, big y)
{
    if(x.num > y.num)
        return true;
    if(x.num < y.num)
        return false;
    for(int i = x.num; i >= 0; --i)
    {
        if(x.d[i] > y.d[i])
            return true;
        if(x.d[i] < y.d[i])
            return false;
    }
    return false;
}

bool operator < (big x, big y)
{
    if(x.num < y.num)
        return true;
    if(x.num > y.num)
        return false;
    for(int i = x.num; i >= 0; --i)
    {
        if(x.d[i] < y.d[i])
            return true;
        if(x.d[i] > y.d[i])
            return false;
    }
    return false;
}

bool operator >= (big x, big y)
{
    if(x.num > y.num)
        return true;
    if(x.num < y.num)
        return false;
    for(int i = x.num; i >= 0; --i)
    {
        if(x.d[i] > y.d[i])
            return true;
        if(x.d[i] < y.d[i])
            return false;
    }
    return true;
}

bool operator <= (big x, big y)
{
    if(x.num < y.num)
        return true;
    if(x.num > y.num)
        return false;
    for(int i = x.num; i >= 0; --i)
    {
        if(x.d[i] < y.d[i])
            return true;
        if(x.d[i] > y.d[i])
            return false;
    }
    return true;
}

bool operator == (big x, big y)
{
    if(x.num != y.num)
        return false;
    for(int i = x.num; i >= 0; --i)
        if(x.d[i] != y.d[i])
            return false;
    return true;
}

//nhap vao big num
char s[10*maxD];
void scanfbig(big &x)
{
    scanf("%s",s);
    int n = strlen(s);
    reverse(s,s+n);
    x.num = -1;
    int u = 0;
    while(u < n)
    {
        x.d[++x.num] = 0;
        int lt = 1;
        for(int i = 0; i < 8; ++i)
        {
            if(u + i >= n)
                break;
            x.d[x.num] += (s[u+i] - '0')*lt;
            lt *= 10;
        }
        u += 8;
    }
}

//in ra bignum
void printfbig(big &x)
{
    printf("%d",x.d[x.num]);
    for(int i = x.num - 1; i >= 0; --i)
        printf("%08d",x.d[i]);
}

//gan gia tri cho bignum
void gan(int k, big &x)
{
    x.num = -1;
    do
    {
        x.d[++x.num] = k%coso;
        k = k/coso;
    }
    while(k);
}

//phep cong
big operator + (big x, big y)
{
    big z;
    z.num = max(x.num, y.num);
    for(int i = x.num + 1; i <= z.num; ++i)
        x.d[i] = 0;
    for(int i = y.num + 1; i <= z.num; ++i)
        y.d[i] = 0;
    int tong = 0;
    for(int i = 0; i <= z.num; ++i)
    {
        tong += x.d[i] + y.d[i];
        z.d[i] = tong % coso;
        tong /= coso;
    }
    if(tong)
        z.d[++z.num] = 1;
    return z;
}

//phep tru
big operator - (big x, big y)
{
    big z;
    z.num = x.num;
    for(int i = y.num + 1; i <= z.num; ++i)
        y.d[i] = 0;
    int nho = 0;
    for(int i = 0; i <= z.num; ++i)
    {
        int hieu = x.d[i] - y.d[i] - nho;
        if(hieu < 0)
        {
            hieu += coso;
            nho = 1;
        }
        else
            nho = 0;
        z.d[i] = hieu;
    }
    while(z.num && z.d[z.num] == 0)
        -- z.num;
    return z;
}

//phep nhan (1big, 1small)
big operator *(big x, int k)
{
    big y;
    y.num = x.num;
    long long tich = 0;
    for(int i = 0; i <= y.num; ++i)
    {
        tich += 1ll*k*x.d[i];
        y.d[i] = (int)(tich % (1ll*coso));
        tich = tich/(1ll*coso);
    }
    while(tich)
    {
        y.d[++y.num] = (int)(tich % (1ll*coso));
        tich = tich/(1ll*coso);
    }
    while(y.num && y.d[y.num] == 0)
        -- y.num;
    return y;
}

big operator *(int k, big x)
{
    big y;
    y.num = x.num;
    long long tich = 0;
    for(int i = 0; i <= y.num; ++i)
    {
        tich += 1ll*k*x.d[i];
        y.d[i] = (int)(tich % (1ll*coso));
        tich = tich/(1ll*coso);
    }
    while(tich)
    {
        y.d[++y.num] = (int)(tich % (1ll*coso));
        tich = tich/(1ll*coso);
    }
    while(y.num && y.d[y.num] == 0)
        -- y.num;
    return y;
}

//phep nhan 2big
big operator *(big x, big y)
{
    big z;
    z.num = x.num + y.num;
    for(int i = x.num + 1; i <= z.num; ++i)
        x.d[i] = 0;
    for(int i = y.num + 1; i <= z.num; ++i)
        y.d[i] = 0;
    long long tich = 0;
    for(int k = 0; k <= z.num; ++k)
    {
        for(int i = 0; i<= k; ++i)
            tich += 1ll*x.d[i]*y.d[k-i];
        z.d[k] = tich%(1ll*coso);
        tich = tich/(1ll*coso);
    }
    while(tich)
    {
        z.d[++z.num] = (int)(tich % (1ll*coso));
        tich = tich/(1ll*coso);
    }
    while(z.num && z.d[y.num] == 0)
        -- z.num;
    return z;
}

//phep chia du 1 big 1 small
int operator %(big x, int k)
{
    int res = 0;
    for(int i = x.num; i >= 0; --i)
        res = (1ll*res*coso + x.d[i])%k;
    return res;
}

//phep chia nguyen 1 big 1small
big operator / (big x, int k)
{
    big y;
    y.num = -1;
    long long du = 0;
    for(int i = x.num; i >= 0; --i)
    {
        du = du * coso + x.d[i];
        y.d[++y.num] = du / k;
        du %= k;
    }
    reverse(y.d, y.d + y.num + 1);
    while(y.num && y.d[y.num] == 0)
        -- y.num;
    return y;
}

//phep chia 2 big
big operator / (big &x, big &y)
{
    big zero, one;
    gan(0,zero);
    gan(1,one);
    big hi, lo;
    hi = one;
    lo = zero;
    while( (hi*y) < x)
    {
        lo = hi;
        hi = 2*hi;
    }
    while(hi - lo > one)
    {
        big mid = (hi + lo) / 2;
        if(mid * y <= x)
            lo = mid;
        else
            hi = mid;
    }
    return lo;
}

//phep chia du 2 big
big operator % (big x, big y)
{
    big ans = x / y;
    return x - ans*y;
}

